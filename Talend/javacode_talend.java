// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package sesion3mii.integratemysql_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: IntegrateMySQL Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.0.20161026_1219
 * @status 
 */
public class IntegrateMySQL implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "IntegrateMySQL";
	private final String projectName = "SESION3MII";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					IntegrateMySQL.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(IntegrateMySQL.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputJSON_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputJSON_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputJSON_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class outputUsersStruct implements
			routines.system.IPersistableRow<outputUsersStruct> {
		final static byte[] commonByteArrayLock_SESION3MII_IntegrateMySQL = new byte[0];
		static byte[] commonByteArray_SESION3MII_IntegrateMySQL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public int Age;

		public int getAge() {
			return this.Age;
		}

		public String Sex;

		public String getSex() {
			return this.Sex;
		}

		public String Occupation;

		public String getOccupation() {
			return this.Occupation;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final outputUsersStruct other = (outputUsersStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(outputUsersStruct other) {

			other.ID = this.ID;
			other.Age = this.Age;
			other.Sex = this.Sex;
			other.Occupation = this.Occupation;
			other.Zipcode = this.Zipcode;

		}

		public void copyKeysDataTo(outputUsersStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SESION3MII_IntegrateMySQL.length) {
					if (length < 1024
							&& commonByteArray_SESION3MII_IntegrateMySQL.length == 0) {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[1024];
					} else {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SESION3MII_IntegrateMySQL, 0,
						length);
				strReturn = new String(
						commonByteArray_SESION3MII_IntegrateMySQL, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SESION3MII_IntegrateMySQL) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Age = dis.readInt();

					this.Sex = readString(dis);

					this.Occupation = readString(dis);

					this.Zipcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// int

				dos.writeInt(this.Age);

				// String

				writeString(this.Sex, dos);

				// String

				writeString(this.Occupation, dos);

				// String

				writeString(this.Zipcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Sex=" + Sex);
			sb.append(",Occupation=" + Occupation);
			sb.append(",Zipcode=" + Zipcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outputUsersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SESION3MII_IntegrateMySQL = new byte[0];
		static byte[] commonByteArray_SESION3MII_IntegrateMySQL = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public int Age;

		public int getAge() {
			return this.Age;
		}

		public String Sex;

		public String getSex() {
			return this.Sex;
		}

		public String Occupation;

		public String getOccupation() {
			return this.Occupation;
		}

		public String Zipcode;

		public String getZipcode() {
			return this.Zipcode;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SESION3MII_IntegrateMySQL.length) {
					if (length < 1024
							&& commonByteArray_SESION3MII_IntegrateMySQL.length == 0) {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[1024];
					} else {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SESION3MII_IntegrateMySQL, 0,
						length);
				strReturn = new String(
						commonByteArray_SESION3MII_IntegrateMySQL, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SESION3MII_IntegrateMySQL) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Age = dis.readInt();

					this.Sex = readString(dis);

					this.Occupation = readString(dis);

					this.Zipcode = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// int

				dos.writeInt(this.Age);

				// String

				writeString(this.Sex, dos);

				// String

				writeString(this.Occupation, dos);

				// String

				writeString(this.Zipcode, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Age=" + String.valueOf(Age));
			sb.append(",Sex=" + Sex);
			sb.append(",Occupation=" + Occupation);
			sb.append(",Zipcode=" + Zipcode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				outputUsersStruct outputUsers = new outputUsersStruct();

				/**
				 * [tFileOutputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_1", false);
				start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("outputUsers"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputJSON_1 = 0;

				class BytesLimit65535_tFileOutputJSON_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputJSON_1().limitLog4jByte();
				int nb_line_tFileOutputJSON_1 = 0;
				java.io.File file_tFileOutputJSON_1 = new java.io.File(
						"C:/Users/practica/Desktop/ml-100k/output/users.json");
				java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1
						.getParentFile();
				if (dir_tFileOutputJSON_1 != null
						&& !dir_tFileOutputJSON_1.exists()) {
					dir_tFileOutputJSON_1.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(
						new java.io.BufferedWriter(
								new java.io.FileWriter(
										"C:/Users/practica/Desktop/ml-100k/output/users.json")));
				outtFileOutputJSON_1.append("[");
				boolean isFirst_tFileOutputJSON_1 = true;

				/**
				 * [tFileOutputJSON_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				outputUsersStruct outputUsers_tmp = new outputUsersStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				class BytesLimit65535_tFileInputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_1().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "C:/Users/practica/Desktop/ml-100k/u.user";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/practica/Desktop/ml-100k/u.user",
								"ISO-8859-15", "|", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								rowstate_tFileInputDelimited_1
										.setException(new RuntimeException(
												"Value is empty for column : 'ID' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Age = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								rowstate_tFileInputDelimited_1
										.setException(new RuntimeException(
												"Value is empty for column : 'Age' in 'row1' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.Sex = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.Occupation = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.Zipcode = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								outputUsers = null;

								// # Output table : 'outputUsers'
								outputUsers_tmp.ID = row1.ID;
								outputUsers_tmp.Age = row1.Age;
								outputUsers_tmp.Sex = row1.Sex;
								outputUsers_tmp.Occupation = row1.Occupation;
								outputUsers_tmp.Zipcode = row1.Zipcode;
								outputUsers = outputUsers_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "outputUsers"
							if (outputUsers != null) {

								/**
								 * [tFileOutputJSON_1 main ] start
								 */

								currentComponent = "tFileOutputJSON_1";

								// outputUsers
								// outputUsers

								if (execStat) {
									runStat.updateStatOnConnection(
											"outputUsers" + iterateId, 1, 1);
								}

								org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
								jsonRowtFileOutputJSON_1.put("ID",
										outputUsers.ID);

								jsonRowtFileOutputJSON_1.put("Age",
										outputUsers.Age);

								if (outputUsers.Sex != null) {

									jsonRowtFileOutputJSON_1.put("Sex",
											outputUsers.Sex);

								} else {
									jsonRowtFileOutputJSON_1.put("Sex", null);
								}

								if (outputUsers.Occupation != null) {

									jsonRowtFileOutputJSON_1.put("Occupation",
											outputUsers.Occupation);

								} else {
									jsonRowtFileOutputJSON_1.put("Occupation",
											null);
								}

								if (outputUsers.Zipcode != null) {

									jsonRowtFileOutputJSON_1.put("Zipcode",
											outputUsers.Zipcode);

								} else {
									jsonRowtFileOutputJSON_1.put("Zipcode",
											null);
								}

								if (!isFirst_tFileOutputJSON_1) {
									outtFileOutputJSON_1.append(",");
								}
								isFirst_tFileOutputJSON_1 = false;
								outtFileOutputJSON_1
										.append(jsonRowtFileOutputJSON_1
												.toJSONString());
								nb_line_tFileOutputJSON_1++;

								tos_count_tFileOutputJSON_1++;

								/**
								 * [tFileOutputJSON_1 main ] stop
								 */

							} // End of branch "outputUsers"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/Users/practica/Desktop/ml-100k/u.user") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputJSON_1 end ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				outtFileOutputJSON_1.print("]");
				outtFileOutputJSON_1.close();
				globalMap.put("tFileOutputJSON_1_NB_LINE",
						nb_line_tFileOutputJSON_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("outputUsers"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputJSON_1", true);
				end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileOutputJSON_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_1 finally ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				/**
				 * [tFileOutputJSON_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfoutputUsersStruct implements
			routines.system.IPersistableRow<copyOfoutputUsersStruct> {
		final static byte[] commonByteArrayLock_SESION3MII_IntegrateMySQL = new byte[0];
		static byte[] commonByteArray_SESION3MII_IntegrateMySQL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String Release_date;

		public String getRelease_date() {
			return this.Release_date;
		}

		public String Release_video_date;

		public String getRelease_video_date() {
			return this.Release_video_date;
		}

		public String IMDb_URL;

		public String getIMDb_URL() {
			return this.IMDb_URL;
		}

		public int genre_unknown;

		public int getGenre_unknown() {
			return this.genre_unknown;
		}

		public int genre_action;

		public int getGenre_action() {
			return this.genre_action;
		}

		public int genre_adventure;

		public int getGenre_adventure() {
			return this.genre_adventure;
		}

		public int genre_animation;

		public int getGenre_animation() {
			return this.genre_animation;
		}

		public int genre_children;

		public int getGenre_children() {
			return this.genre_children;
		}

		public int genre_comedy;

		public int getGenre_comedy() {
			return this.genre_comedy;
		}

		public int genre_crime;

		public int getGenre_crime() {
			return this.genre_crime;
		}

		public int genre_documentary;

		public int getGenre_documentary() {
			return this.genre_documentary;
		}

		public int genre_drama;

		public int getGenre_drama() {
			return this.genre_drama;
		}

		public int genre_fantasy;

		public int getGenre_fantasy() {
			return this.genre_fantasy;
		}

		public int genre_noir;

		public int getGenre_noir() {
			return this.genre_noir;
		}

		public int genre_horror;

		public int getGenre_horror() {
			return this.genre_horror;
		}

		public int genre_musical;

		public int getGenre_musical() {
			return this.genre_musical;
		}

		public int genre_mystery;

		public int getGenre_mystery() {
			return this.genre_mystery;
		}

		public int genre_romance;

		public int getGenre_romance() {
			return this.genre_romance;
		}

		public int genre_scifi;

		public int getGenre_scifi() {
			return this.genre_scifi;
		}

		public int genre_thriller;

		public int getGenre_thriller() {
			return this.genre_thriller;
		}

		public int genre_war;

		public int getGenre_war() {
			return this.genre_war;
		}

		public int genre_western;

		public int getGenre_western() {
			return this.genre_western;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfoutputUsersStruct other = (copyOfoutputUsersStruct) obj;

			if (this.ID != other.ID)
				return false;

			return true;
		}

		public void copyDataTo(copyOfoutputUsersStruct other) {

			other.ID = this.ID;
			other.Title = this.Title;
			other.Release_date = this.Release_date;
			other.Release_video_date = this.Release_video_date;
			other.IMDb_URL = this.IMDb_URL;
			other.genre_unknown = this.genre_unknown;
			other.genre_action = this.genre_action;
			other.genre_adventure = this.genre_adventure;
			other.genre_animation = this.genre_animation;
			other.genre_children = this.genre_children;
			other.genre_comedy = this.genre_comedy;
			other.genre_crime = this.genre_crime;
			other.genre_documentary = this.genre_documentary;
			other.genre_drama = this.genre_drama;
			other.genre_fantasy = this.genre_fantasy;
			other.genre_noir = this.genre_noir;
			other.genre_horror = this.genre_horror;
			other.genre_musical = this.genre_musical;
			other.genre_mystery = this.genre_mystery;
			other.genre_romance = this.genre_romance;
			other.genre_scifi = this.genre_scifi;
			other.genre_thriller = this.genre_thriller;
			other.genre_war = this.genre_war;
			other.genre_western = this.genre_western;

		}

		public void copyKeysDataTo(copyOfoutputUsersStruct other) {

			other.ID = this.ID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SESION3MII_IntegrateMySQL.length) {
					if (length < 1024
							&& commonByteArray_SESION3MII_IntegrateMySQL.length == 0) {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[1024];
					} else {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SESION3MII_IntegrateMySQL, 0,
						length);
				strReturn = new String(
						commonByteArray_SESION3MII_IntegrateMySQL, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SESION3MII_IntegrateMySQL) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Title = readString(dis);

					this.Release_date = readString(dis);

					this.Release_video_date = readString(dis);

					this.IMDb_URL = readString(dis);

					this.genre_unknown = dis.readInt();

					this.genre_action = dis.readInt();

					this.genre_adventure = dis.readInt();

					this.genre_animation = dis.readInt();

					this.genre_children = dis.readInt();

					this.genre_comedy = dis.readInt();

					this.genre_crime = dis.readInt();

					this.genre_documentary = dis.readInt();

					this.genre_drama = dis.readInt();

					this.genre_fantasy = dis.readInt();

					this.genre_noir = dis.readInt();

					this.genre_horror = dis.readInt();

					this.genre_musical = dis.readInt();

					this.genre_mystery = dis.readInt();

					this.genre_romance = dis.readInt();

					this.genre_scifi = dis.readInt();

					this.genre_thriller = dis.readInt();

					this.genre_war = dis.readInt();

					this.genre_western = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.Release_date, dos);

				// String

				writeString(this.Release_video_date, dos);

				// String

				writeString(this.IMDb_URL, dos);

				// int

				dos.writeInt(this.genre_unknown);

				// int

				dos.writeInt(this.genre_action);

				// int

				dos.writeInt(this.genre_adventure);

				// int

				dos.writeInt(this.genre_animation);

				// int

				dos.writeInt(this.genre_children);

				// int

				dos.writeInt(this.genre_comedy);

				// int

				dos.writeInt(this.genre_crime);

				// int

				dos.writeInt(this.genre_documentary);

				// int

				dos.writeInt(this.genre_drama);

				// int

				dos.writeInt(this.genre_fantasy);

				// int

				dos.writeInt(this.genre_noir);

				// int

				dos.writeInt(this.genre_horror);

				// int

				dos.writeInt(this.genre_musical);

				// int

				dos.writeInt(this.genre_mystery);

				// int

				dos.writeInt(this.genre_romance);

				// int

				dos.writeInt(this.genre_scifi);

				// int

				dos.writeInt(this.genre_thriller);

				// int

				dos.writeInt(this.genre_war);

				// int

				dos.writeInt(this.genre_western);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Title=" + Title);
			sb.append(",Release_date=" + Release_date);
			sb.append(",Release_video_date=" + Release_video_date);
			sb.append(",IMDb_URL=" + IMDb_URL);
			sb.append(",genre_unknown=" + String.valueOf(genre_unknown));
			sb.append(",genre_action=" + String.valueOf(genre_action));
			sb.append(",genre_adventure=" + String.valueOf(genre_adventure));
			sb.append(",genre_animation=" + String.valueOf(genre_animation));
			sb.append(",genre_children=" + String.valueOf(genre_children));
			sb.append(",genre_comedy=" + String.valueOf(genre_comedy));
			sb.append(",genre_crime=" + String.valueOf(genre_crime));
			sb.append(",genre_documentary=" + String.valueOf(genre_documentary));
			sb.append(",genre_drama=" + String.valueOf(genre_drama));
			sb.append(",genre_fantasy=" + String.valueOf(genre_fantasy));
			sb.append(",genre_noir=" + String.valueOf(genre_noir));
			sb.append(",genre_horror=" + String.valueOf(genre_horror));
			sb.append(",genre_musical=" + String.valueOf(genre_musical));
			sb.append(",genre_mystery=" + String.valueOf(genre_mystery));
			sb.append(",genre_romance=" + String.valueOf(genre_romance));
			sb.append(",genre_scifi=" + String.valueOf(genre_scifi));
			sb.append(",genre_thriller=" + String.valueOf(genre_thriller));
			sb.append(",genre_war=" + String.valueOf(genre_war));
			sb.append(",genre_western=" + String.valueOf(genre_western));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfoutputUsersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SESION3MII_IntegrateMySQL = new byte[0];
		static byte[] commonByteArray_SESION3MII_IntegrateMySQL = new byte[0];

		public int ID;

		public int getID() {
			return this.ID;
		}

		public String Title;

		public String getTitle() {
			return this.Title;
		}

		public String Release_date;

		public String getRelease_date() {
			return this.Release_date;
		}

		public String Release_video_date;

		public String getRelease_video_date() {
			return this.Release_video_date;
		}

		public String IMDb_URL;

		public String getIMDb_URL() {
			return this.IMDb_URL;
		}

		public int genre_unknown;

		public int getGenre_unknown() {
			return this.genre_unknown;
		}

		public int genre_action;

		public int getGenre_action() {
			return this.genre_action;
		}

		public int genre_adventure;

		public int getGenre_adventure() {
			return this.genre_adventure;
		}

		public int genre_animation;

		public int getGenre_animation() {
			return this.genre_animation;
		}

		public int genre_children;

		public int getGenre_children() {
			return this.genre_children;
		}

		public int genre_comedy;

		public int getGenre_comedy() {
			return this.genre_comedy;
		}

		public int genre_crime;

		public int getGenre_crime() {
			return this.genre_crime;
		}

		public int genre_documentary;

		public int getGenre_documentary() {
			return this.genre_documentary;
		}

		public int genre_drama;

		public int getGenre_drama() {
			return this.genre_drama;
		}

		public int genre_fantasy;

		public int getGenre_fantasy() {
			return this.genre_fantasy;
		}

		public int genre_noir;

		public int getGenre_noir() {
			return this.genre_noir;
		}

		public int genre_horror;

		public int getGenre_horror() {
			return this.genre_horror;
		}

		public int genre_musical;

		public int getGenre_musical() {
			return this.genre_musical;
		}

		public int genre_mystery;

		public int getGenre_mystery() {
			return this.genre_mystery;
		}

		public int genre_romance;

		public int getGenre_romance() {
			return this.genre_romance;
		}

		public int genre_scifi;

		public int getGenre_scifi() {
			return this.genre_scifi;
		}

		public int genre_thriller;

		public int getGenre_thriller() {
			return this.genre_thriller;
		}

		public int genre_war;

		public int getGenre_war() {
			return this.genre_war;
		}

		public int genre_western;

		public int getGenre_western() {
			return this.genre_western;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SESION3MII_IntegrateMySQL.length) {
					if (length < 1024
							&& commonByteArray_SESION3MII_IntegrateMySQL.length == 0) {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[1024];
					} else {
						commonByteArray_SESION3MII_IntegrateMySQL = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SESION3MII_IntegrateMySQL, 0,
						length);
				strReturn = new String(
						commonByteArray_SESION3MII_IntegrateMySQL, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SESION3MII_IntegrateMySQL) {

				try {

					int length = 0;

					this.ID = dis.readInt();

					this.Title = readString(dis);

					this.Release_date = readString(dis);

					this.Release_video_date = readString(dis);

					this.IMDb_URL = readString(dis);

					this.genre_unknown = dis.readInt();

					this.genre_action = dis.readInt();

					this.genre_adventure = dis.readInt();

					this.genre_animation = dis.readInt();

					this.genre_children = dis.readInt();

					this.genre_comedy = dis.readInt();

					this.genre_crime = dis.readInt();

					this.genre_documentary = dis.readInt();

					this.genre_drama = dis.readInt();

					this.genre_fantasy = dis.readInt();

					this.genre_noir = dis.readInt();

					this.genre_horror = dis.readInt();

					this.genre_musical = dis.readInt();

					this.genre_mystery = dis.readInt();

					this.genre_romance = dis.readInt();

					this.genre_scifi = dis.readInt();

					this.genre_thriller = dis.readInt();

					this.genre_war = dis.readInt();

					this.genre_western = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID);

				// String

				writeString(this.Title, dos);

				// String

				writeString(this.Release_date, dos);

				// String

				writeString(this.Release_video_date, dos);

				// String

				writeString(this.IMDb_URL, dos);

				// int

				dos.writeInt(this.genre_unknown);

				// int

				dos.writeInt(this.genre_action);

				// int

				dos.writeInt(this.genre_adventure);

				// int

				dos.writeInt(this.genre_animation);

				// int

				dos.writeInt(this.genre_children);

				// int

				dos.writeInt(this.genre_comedy);

				// int

				dos.writeInt(this.genre_crime);

				// int

				dos.writeInt(this.genre_documentary);

				// int

				dos.writeInt(this.genre_drama);

				// int

				dos.writeInt(this.genre_fantasy);

				// int

				dos.writeInt(this.genre_noir);

				// int

				dos.writeInt(this.genre_horror);

				// int

				dos.writeInt(this.genre_musical);

				// int

				dos.writeInt(this.genre_mystery);

				// int

				dos.writeInt(this.genre_romance);

				// int

				dos.writeInt(this.genre_scifi);

				// int

				dos.writeInt(this.genre_thriller);

				// int

				dos.writeInt(this.genre_war);

				// int

				dos.writeInt(this.genre_western);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",Title=" + Title);
			sb.append(",Release_date=" + Release_date);
			sb.append(",Release_video_date=" + Release_video_date);
			sb.append(",IMDb_URL=" + IMDb_URL);
			sb.append(",genre_unknown=" + String.valueOf(genre_unknown));
			sb.append(",genre_action=" + String.valueOf(genre_action));
			sb.append(",genre_adventure=" + String.valueOf(genre_adventure));
			sb.append(",genre_animation=" + String.valueOf(genre_animation));
			sb.append(",genre_children=" + String.valueOf(genre_children));
			sb.append(",genre_comedy=" + String.valueOf(genre_comedy));
			sb.append(",genre_crime=" + String.valueOf(genre_crime));
			sb.append(",genre_documentary=" + String.valueOf(genre_documentary));
			sb.append(",genre_drama=" + String.valueOf(genre_drama));
			sb.append(",genre_fantasy=" + String.valueOf(genre_fantasy));
			sb.append(",genre_noir=" + String.valueOf(genre_noir));
			sb.append(",genre_horror=" + String.valueOf(genre_horror));
			sb.append(",genre_musical=" + String.valueOf(genre_musical));
			sb.append(",genre_mystery=" + String.valueOf(genre_mystery));
			sb.append(",genre_romance=" + String.valueOf(genre_romance));
			sb.append(",genre_scifi=" + String.valueOf(genre_scifi));
			sb.append(",genre_thriller=" + String.valueOf(genre_thriller));
			sb.append(",genre_war=" + String.valueOf(genre_war));
			sb.append(",genre_western=" + String.valueOf(genre_western));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				copyOfoutputUsersStruct copyOfoutputUsers = new copyOfoutputUsersStruct();

				/**
				 * [tFileOutputJSON_2 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_2", false);
				start_Hash.put("tFileOutputJSON_2", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("copyOfoutputUsers"
								+ iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputJSON_2 = 0;

				class BytesLimit65535_tFileOutputJSON_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputJSON_2().limitLog4jByte();
				int nb_line_tFileOutputJSON_2 = 0;
				java.io.File file_tFileOutputJSON_2 = new java.io.File(
						"C:/Users/practica/Desktop/ml-100k/output/items.json");
				java.io.File dir_tFileOutputJSON_2 = file_tFileOutputJSON_2
						.getParentFile();
				if (dir_tFileOutputJSON_2 != null
						&& !dir_tFileOutputJSON_2.exists()) {
					dir_tFileOutputJSON_2.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_2 = new java.io.PrintWriter(
						new java.io.BufferedWriter(
								new java.io.FileWriter(
										"C:/Users/practica/Desktop/ml-100k/output/items.json")));
				outtFileOutputJSON_2.append("[");
				boolean isFirst_tFileOutputJSON_2 = true;

				/**
				 * [tFileOutputJSON_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfoutputUsersStruct copyOfoutputUsers_tmp = new copyOfoutputUsersStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				class BytesLimit65535_tFileInputDelimited_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_2().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = "C:/Users/practica/Desktop/ml-100k/u.item";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/practica/Desktop/ml-100k/u.item",
								"ISO-8859-15", "|", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.ID = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'ID' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row2.Title = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row2.Release_date = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row2.Release_video_date = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row2.IMDb_URL = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_unknown = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_unknown' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_action = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_action' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 7;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_adventure = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_adventure' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 8;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_animation = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_animation' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 9;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_children = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_children' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 10;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_comedy = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_comedy' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 11;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_crime = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_crime' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 12;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_documentary = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_documentary' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 13;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_drama = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_drama' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 14;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_fantasy = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_fantasy' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 15;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_noir = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_noir' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 16;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_horror = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_horror' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 17;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_musical = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_musical' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 18;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_mystery = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_mystery' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 19;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_romance = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_romance' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 20;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_scifi = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_scifi' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 21;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_thriller = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_thriller' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 22;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_war = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_war' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_2 = 23;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row2.genre_western = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								rowstate_tFileInputDelimited_2
										.setException(new RuntimeException(
												"Value is empty for column : 'genre_western' in 'row2' connection, value is invalid or this column should be nullable or have a default value."));

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							// row2
							// row2

							if (execStat) {
								runStat.updateStatOnConnection("row2"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								copyOfoutputUsers = null;

								// # Output table : 'copyOfoutputUsers'
								copyOfoutputUsers_tmp.ID = row2.ID;
								copyOfoutputUsers_tmp.Title = row2.Title;
								copyOfoutputUsers_tmp.Release_date = row2.Release_date;
								copyOfoutputUsers_tmp.Release_video_date = row2.Release_video_date;
								copyOfoutputUsers_tmp.IMDb_URL = row2.IMDb_URL;
								copyOfoutputUsers_tmp.genre_unknown = row2.genre_unknown;
								copyOfoutputUsers_tmp.genre_action = row2.genre_action;
								copyOfoutputUsers_tmp.genre_adventure = row2.genre_adventure;
								copyOfoutputUsers_tmp.genre_animation = row2.genre_animation;
								copyOfoutputUsers_tmp.genre_children = row2.genre_children;
								copyOfoutputUsers_tmp.genre_comedy = row2.genre_comedy;
								copyOfoutputUsers_tmp.genre_crime = row2.genre_crime;
								copyOfoutputUsers_tmp.genre_documentary = row2.genre_documentary;
								copyOfoutputUsers_tmp.genre_drama = row2.genre_drama;
								copyOfoutputUsers_tmp.genre_fantasy = row2.genre_fantasy;
								copyOfoutputUsers_tmp.genre_noir = row2.genre_noir;
								copyOfoutputUsers_tmp.genre_horror = row2.genre_horror;
								copyOfoutputUsers_tmp.genre_musical = row2.genre_musical;
								copyOfoutputUsers_tmp.genre_mystery = row2.genre_mystery;
								copyOfoutputUsers_tmp.genre_romance = row2.genre_romance;
								copyOfoutputUsers_tmp.genre_scifi = row2.genre_scifi;
								copyOfoutputUsers_tmp.genre_thriller = row2.genre_thriller;
								copyOfoutputUsers_tmp.genre_war = row2.genre_war;
								copyOfoutputUsers_tmp.genre_western = row2.genre_western;
								copyOfoutputUsers = copyOfoutputUsers_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "copyOfoutputUsers"
							if (copyOfoutputUsers != null) {

								/**
								 * [tFileOutputJSON_2 main ] start
								 */

								currentComponent = "tFileOutputJSON_2";

								// copyOfoutputUsers
								// copyOfoutputUsers

								if (execStat) {
									runStat.updateStatOnConnection(
											"copyOfoutputUsers" + iterateId, 1,
											1);
								}

								org.json.simple.JSONObject jsonRowtFileOutputJSON_2 = new org.json.simple.JSONObject();
								jsonRowtFileOutputJSON_2.put("ID",
										copyOfoutputUsers.ID);

								if (copyOfoutputUsers.Title != null) {

									jsonRowtFileOutputJSON_2.put("Title",
											copyOfoutputUsers.Title);

								} else {
									jsonRowtFileOutputJSON_2.put("Title", null);
								}

								if (copyOfoutputUsers.Release_date != null) {

									jsonRowtFileOutputJSON_2.put(
											"Release_date",
											copyOfoutputUsers.Release_date);

								} else {
									jsonRowtFileOutputJSON_2.put(
											"Release_date", null);
								}

								if (copyOfoutputUsers.Release_video_date != null) {

									jsonRowtFileOutputJSON_2
											.put("Release_video_date",
													copyOfoutputUsers.Release_video_date);

								} else {
									jsonRowtFileOutputJSON_2.put(
											"Release_video_date", null);
								}

								if (copyOfoutputUsers.IMDb_URL != null) {

									jsonRowtFileOutputJSON_2.put("IMDb_URL",
											copyOfoutputUsers.IMDb_URL);

								} else {
									jsonRowtFileOutputJSON_2.put("IMDb_URL",
											null);
								}

								jsonRowtFileOutputJSON_2.put("genre_unknown",
										copyOfoutputUsers.genre_unknown);

								jsonRowtFileOutputJSON_2.put("genre_action",
										copyOfoutputUsers.genre_action);

								jsonRowtFileOutputJSON_2.put("genre_adventure",
										copyOfoutputUsers.genre_adventure);

								jsonRowtFileOutputJSON_2.put("genre_animation",
										copyOfoutputUsers.genre_animation);

								jsonRowtFileOutputJSON_2.put("genre_children",
										copyOfoutputUsers.genre_children);

								jsonRowtFileOutputJSON_2.put("genre_comedy",
										copyOfoutputUsers.genre_comedy);

								jsonRowtFileOutputJSON_2.put("genre_crime",
										copyOfoutputUsers.genre_crime);

								jsonRowtFileOutputJSON_2.put(
										"genre_documentary",
										copyOfoutputUsers.genre_documentary);

								jsonRowtFileOutputJSON_2.put("genre_drama",
										copyOfoutputUsers.genre_drama);

								jsonRowtFileOutputJSON_2.put("genre_fantasy",
										copyOfoutputUsers.genre_fantasy);

								jsonRowtFileOutputJSON_2.put("genre_noir",
										copyOfoutputUsers.genre_noir);

								jsonRowtFileOutputJSON_2.put("genre_horror",
										copyOfoutputUsers.genre_horror);

								jsonRowtFileOutputJSON_2.put("genre_musical",
										copyOfoutputUsers.genre_musical);

								jsonRowtFileOutputJSON_2.put("genre_mystery",
										copyOfoutputUsers.genre_mystery);

								jsonRowtFileOutputJSON_2.put("genre_romance",
										copyOfoutputUsers.genre_romance);

								jsonRowtFileOutputJSON_2.put("genre_scifi",
										copyOfoutputUsers.genre_scifi);

								jsonRowtFileOutputJSON_2.put("genre_thriller",
										copyOfoutputUsers.genre_thriller);

								jsonRowtFileOutputJSON_2.put("genre_war",
										copyOfoutputUsers.genre_war);

								jsonRowtFileOutputJSON_2.put("genre_western",
										copyOfoutputUsers.genre_western);

								if (!isFirst_tFileOutputJSON_2) {
									outtFileOutputJSON_2.append(",");
								}
								isFirst_tFileOutputJSON_2 = false;
								outtFileOutputJSON_2
										.append(jsonRowtFileOutputJSON_2
												.toJSONString());
								nb_line_tFileOutputJSON_2++;

								tos_count_tFileOutputJSON_2++;

								/**
								 * [tFileOutputJSON_2 main ] stop
								 */

							} // End of branch "copyOfoutputUsers"

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/Users/practica/Desktop/ml-100k/u.item") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row2" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputJSON_2 end ] start
				 */

				currentComponent = "tFileOutputJSON_2";

				outtFileOutputJSON_2.print("]");
				outtFileOutputJSON_2.close();
				globalMap.put("tFileOutputJSON_2_NB_LINE",
						nb_line_tFileOutputJSON_2);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("copyOfoutputUsers"
								+ iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputJSON_2", true);
				end_Hash.put("tFileOutputJSON_2", System.currentTimeMillis());

				/**
				 * [tFileOutputJSON_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_2 finally ] start
				 */

				currentComponent = "tFileOutputJSON_2";

				/**
				 * [tFileOutputJSON_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcopyOfoutputUsersStruct implements
			routines.system.IPersistableRow<copyOfcopyOfoutputUsersStruct> {
		final static byte[] commonByteArrayLock_SESION3MII_IntegrateMySQL = new byte[0];
		static byte[] commonByteArray_SESION3MII_IntegrateMySQL = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int user_ID;

		public int getUser_ID() {
			return this.user_ID;
		}

		public int item_ID;

		public int getItem_ID() {
			return this.item_ID;
		}

		public int rating;

		public int getRating() {
			return this.rating;
		}

		public int timestamp;

		public int getTimestamp() {
			return this.timestamp;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.user_ID;

				result = prime * result + (int) this.item_ID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfcopyOfoutputUsersStruct other = (copyOfcopyOfoutputUsersStruct) obj;

			if (this.user_ID != other.user_ID)
				return false;

			if (this.item_ID != other.item_ID)
				return false;

			return true;
		}

		public void copyDataTo(copyOfcopyOfoutputUsersStruct other) {

			other.user_ID = this.user_ID;
			other.item_ID = this.item_ID;
			other.rating = this.rating;
			other.timestamp = this.timestamp;

		}

		public void copyKeysDataTo(copyOfcopyOfoutputUsersStruct other) {

			other.user_ID = this.user_ID;
			other.item_ID = this.item_ID;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SESION3MII_IntegrateMySQL) {

				try {

					int length = 0;

					this.user_ID = dis.readInt();

					this.item_ID = dis.readInt();

					this.rating = dis.readInt();

					this.timestamp = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.user_ID);

				// int

				dos.writeInt(this.item_ID);

				// int

				dos.writeInt(this.rating);

				// int

				dos.writeInt(this.timestamp);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_ID=" + String.valueOf(user_ID));
			sb.append(",item_ID=" + String.valueOf(item_ID));
			sb.append(",rating=" + String.valueOf(rating));
			sb.append(",timestamp=" + String.valueOf(timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfoutputUsersStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_ID, other.user_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.item_ID, other.item_ID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SESION3MII_IntegrateMySQL = new byte[0];
		static byte[] commonByteArray_SESION3MII_IntegrateMySQL = new byte[0];

		public int user_ID;

		public int getUser_ID() {
			return this.user_ID;
		}

		public int item_ID;

		public int getItem_ID() {
			return this.item_ID;
		}

		public int rating;

		public int getRating() {
			return this.rating;
		}

		public int timestamp;

		public int getTimestamp() {
			return this.timestamp;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SESION3MII_IntegrateMySQL) {

				try {

					int length = 0;

					this.user_ID = dis.readInt();

					this.item_ID = dis.readInt();

					this.rating = dis.readInt();

					this.timestamp = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.user_ID);

				// int

				dos.writeInt(this.item_ID);

				// int

				dos.writeInt(this.rating);

				// int

				dos.writeInt(this.timestamp);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("user_ID=" + String.valueOf(user_ID));
			sb.append(",item_ID=" + String.valueOf(item_ID));
			sb.append(",rating=" + String.valueOf(rating));
			sb.append(",timestamp=" + String.valueOf(timestamp));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfcopyOfoutputUsersStruct copyOfcopyOfoutputUsers = new copyOfcopyOfoutputUsersStruct();

				/**
				 * [tFileOutputJSON_3 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_3", false);
				start_Hash.put("tFileOutputJSON_3", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection(
								"copyOfcopyOfoutputUsers" + iterateId, 0, 0);

					}
				}

				int tos_count_tFileOutputJSON_3 = 0;

				class BytesLimit65535_tFileOutputJSON_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputJSON_3().limitLog4jByte();
				int nb_line_tFileOutputJSON_3 = 0;
				java.io.File file_tFileOutputJSON_3 = new java.io.File(
						"C:/Users/practica/Desktop/ml-100k/output/rates.json");
				java.io.File dir_tFileOutputJSON_3 = file_tFileOutputJSON_3
						.getParentFile();
				if (dir_tFileOutputJSON_3 != null
						&& !dir_tFileOutputJSON_3.exists()) {
					dir_tFileOutputJSON_3.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_3 = new java.io.PrintWriter(
						new java.io.BufferedWriter(
								new java.io.FileWriter(
										"C:/Users/practica/Desktop/ml-100k/output/rates.json")));
				outtFileOutputJSON_3.append("[");
				boolean isFirst_tFileOutputJSON_3 = true;

				/**
				 * [tFileOutputJSON_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);

					}
				}

				int tos_count_tMap_3 = 0;

				class BytesLimit65535_tMap_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_3().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOfoutputUsersStruct copyOfcopyOfoutputUsers_tmp = new copyOfcopyOfoutputUsersStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				class BytesLimit65535_tFileInputDelimited_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputDelimited_3().limitLog4jByte();

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = "C:/Users/practica/Desktop/ml-100k/u.data";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/Users/practica/Desktop/ml-100k/u.data",
								"ISO-8859-15", "|", "\n", true, 0, 0, -1, -1,
								false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.user_ID = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(ex_tFileInputDelimited_3);
								}

							} else {

								rowstate_tFileInputDelimited_3
										.setException(new RuntimeException(
												"Value is empty for column : 'user_ID' in 'row3' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.item_ID = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(ex_tFileInputDelimited_3);
								}

							} else {

								rowstate_tFileInputDelimited_3
										.setException(new RuntimeException(
												"Value is empty for column : 'item_ID' in 'row3' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.rating = ParserUtils.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(ex_tFileInputDelimited_3);
								}

							} else {

								rowstate_tFileInputDelimited_3
										.setException(new RuntimeException(
												"Value is empty for column : 'rating' in 'row3' connection, value is invalid or this column should be nullable or have a default value."));

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row3.timestamp = ParserUtils
											.parseTo_int(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(ex_tFileInputDelimited_3);
								}

							} else {

								rowstate_tFileInputDelimited_3
										.setException(new RuntimeException(
												"Value is empty for column : 'timestamp' in 'row3' connection, value is invalid or this column should be nullable or have a default value."));

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							// row3
							// row3

							if (execStat) {
								runStat.updateStatOnConnection("row3"
										+ iterateId, 1, 1);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOfcopyOfoutputUsers = null;

								// # Output table : 'copyOfcopyOfoutputUsers'
								copyOfcopyOfoutputUsers_tmp.user_ID = row3.user_ID;
								copyOfcopyOfoutputUsers_tmp.item_ID = row3.item_ID;
								copyOfcopyOfoutputUsers_tmp.rating = row3.rating;
								copyOfcopyOfoutputUsers_tmp.timestamp = row3.timestamp;
								copyOfcopyOfoutputUsers = copyOfcopyOfoutputUsers_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "copyOfcopyOfoutputUsers"
							if (copyOfcopyOfoutputUsers != null) {

								/**
								 * [tFileOutputJSON_3 main ] start
								 */

								currentComponent = "tFileOutputJSON_3";

								// copyOfcopyOfoutputUsers
								// copyOfcopyOfoutputUsers

								if (execStat) {
									runStat.updateStatOnConnection(
											"copyOfcopyOfoutputUsers"
													+ iterateId, 1, 1);
								}

								org.json.simple.JSONObject jsonRowtFileOutputJSON_3 = new org.json.simple.JSONObject();
								jsonRowtFileOutputJSON_3.put("user_ID",
										copyOfcopyOfoutputUsers.user_ID);

								jsonRowtFileOutputJSON_3.put("item_ID",
										copyOfcopyOfoutputUsers.item_ID);

								jsonRowtFileOutputJSON_3.put("rating",
										copyOfcopyOfoutputUsers.rating);

								jsonRowtFileOutputJSON_3.put("timestamp",
										copyOfcopyOfoutputUsers.timestamp);

								if (!isFirst_tFileOutputJSON_3) {
									outtFileOutputJSON_3.append(",");
								}
								isFirst_tFileOutputJSON_3 = false;
								outtFileOutputJSON_3
										.append(jsonRowtFileOutputJSON_3
												.toJSONString());
								nb_line_tFileOutputJSON_3++;

								tos_count_tFileOutputJSON_3++;

								/**
								 * [tFileOutputJSON_3 main ] stop
								 */

							} // End of branch "copyOfcopyOfoutputUsers"

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/Users/practica/Desktop/ml-100k/u.data") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row3" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputJSON_3 end ] start
				 */

				currentComponent = "tFileOutputJSON_3";

				outtFileOutputJSON_3.print("]");
				outtFileOutputJSON_3.close();
				globalMap.put("tFileOutputJSON_3_NB_LINE",
						nb_line_tFileOutputJSON_3);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection(
								"copyOfcopyOfoutputUsers" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tFileOutputJSON_3", true);
				end_Hash.put("tFileOutputJSON_3", System.currentTimeMillis());

				/**
				 * [tFileOutputJSON_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_3 finally ] start
				 */

				currentComponent = "tFileOutputJSON_3";

				/**
				 * [tFileOutputJSON_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final IntegrateMySQL IntegrateMySQLClass = new IntegrateMySQL();

		int exitCode = IntegrateMySQLClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = IntegrateMySQL.class
					.getClassLoader().getResourceAsStream(
							"sesion3mii/integratemysql_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_2) {
			globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : IntegrateMySQL");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 122582 characters generated by Talend Open Studio for Data Integration on the
 * 20 de diciembre de 2016 20:24:32 GMT+01:00
 ************************************************************************************************/
